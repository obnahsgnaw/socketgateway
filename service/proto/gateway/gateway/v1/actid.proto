/*
Socket协议网关层协议
整体说明：
0. 发送流程：
   - 建立连接后先发送一个尝试包， 服务端读取第一包的第一个字节来确定编解码类型 ‘{’ 或者 'j' 则认定为json结构（如果是‘j’会被去掉，如果是‘{‘则原样保留）
   - 同时对第一个包进行加解密解析和响应，如果服务端未启用加解密 则不管是否有数据都会返回000,并抛弃掉第一包的数据，如果有加密则会解析， 如果失败则返回222， 正常则返回111，后续则可进行其他协议操作
   - 构建业务data和action -> 封装成GatewayPackage -> 加密 -> 沾包封包处理 -> 发送到服务端 -> 服务端响应 -> 沾包拆包 -> 解密 -> GatewayPackage -> 解析action 和 data -> 解析data
1. 协议包结构为两层
  - 网关层包GatewayPackage， 包含action id 和 data， action id为业务标识， data为业务数据提，请求和响应都是这个结构
  - 业务数据包， 即 data， 为各个业务对应的数据结构
2. 网关层有3个主协议， ping-pong, authReq-authResp, gatewayErr
3. 先解析网关层包结构，跟进业务标识action解析对应的data结构
4. 如果有认证，向网关层进行auth认证，认证token格式为 appid+空格+token
5. 向各个服务发起协议请求
认证说明：
1. 从用户中心获取用于认证的token
2. 发起auth协议
加解密说明：
1. 先通过rsa加密aes-cbc的密钥+时间戳，发送一个尝试包 （注意 第一个字节补充上编码位），即第一包格式为 编码位+rsa密文包
2. 如果服务端启用了加解密， 解析成功则返回111，否则返回000，如果密钥格式有问题返回222(比如位数不对，时间戳过期等)
3. 后续的 通过aes 加密 GatewayPackage 正常解析
*/
syntax = "proto3";
package gateway.v1;

// 网关层的Action id
enum ActionId{
  None = 0;
  GatewayErr = 1; //
  Ping = 11; // ping 测试
  Pong = 12; // pong 响应
  AuthReq = 13; // 认证的请求
  AuthResp = 14; // 认证的响应
}