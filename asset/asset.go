// Code generated for package asset by go-bindata DO NOT EDIT. (@generated)
// sources:
// service/doc/html/gateway.html
// service/doc/html/index.tmpl
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceDocHtmlGatewayHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x7b\x6f\xdb\x46\xb6\xff\xdf\x9f\x62\xae\x82\x5e\x24\x68\xf4\xf4\x23\xb9\x0e\xad\x8b\x34\x8f\x36\x8b\x36\x1b\xd4\xee\x02\x8b\xc5\x6e\x31\x22\x47\xe2\xc0\x14\xa9\x72\x86\x4e\xb4\x8b\x05\xec\xae\x9d\x3a\x59\xbb\x49\x1b\x37\x69\x5d\x37\xeb\xa0\x29\x9a\x2d\xd0\xa8\x69\xd3\xc6\xeb\x38\x9b\xef\xb2\x10\x25\xf9\xaf\x7c\x85\xc5\x70\x28\x8a\x14\x1f\x7a\xc7\x69\x53\xe4\x0f\x93\x33\xc3\x73\xce\x9c\xf3\x3b\x8f\x39\x64\x24\xfc\xcf\xe9\xdf\x9e\x9a\xfb\xfd\x85\x33\x40\xa6\x45\x25\x3b\x36\x26\xf0\xbf\x00\x08\x32\x82\x12\xbb\x00\x40\xa0\x98\x2a\x28\x7b\x41\xd7\xa8\x26\x6a\x0a\x38\xad\x89\x46\x11\xa9\x14\x52\xac\xa9\x42\x92\xcf\xf2\x95\x45\x44\x21\x10\x65\xa8\x13\x44\x67\x62\xef\xcc\x9d\x8d\x1f\x8f\xd9\x53\x0a\x56\xe7\x81\x8e\x94\x99\x18\xa1\x65\x05\x11\x19\x21\x1a\x03\xb4\x5c\x42\x33\x31\x8a\x2e\xd1\xa4\x48\x48\x0c\xc8\x3a\xca\xcf\xc4\x64\x4a\x4b\x64\x3a\x99\xcc\x6b\x2a\x25\x89\x82\xa6\x15\x14\x04\x4b\x98\x24\x44\xad\xc8\xd6\xfd\x7f\x1e\x16\xb1\x52\x9e\x79\x27\x67\xa8\xd4\x98\x9e\x48\xa5\x8e\x1e\x4b\xa5\x8e\x4e\xa4\x52\x98\x42\x05\x8b\xb1\xa4\xcd\xd4\x62\xc5\xaf\x01\xc8\x69\x52\x19\xfc\xc5\xbe\x01\xe0\x22\x96\xa8\x3c\x0d\xa6\x52\xa8\x78\xc2\x19\x2c\x42\xbd\x80\xd5\x69\x90\x46\x45\x00\x0d\xaa\xb5\x66\x44\x4d\xd1\xf4\x69\x70\x28\x93\xc9\xb4\x06\x99\x80\x71\x2e\xcc\x34\x88\x71\x71\x62\x47\x01\x81\x2a\x89\x13\xa4\xe3\x7c\x6b\x69\x09\x4a\x12\x56\x0b\xf1\x9c\x46\xa9\x56\x9c\x06\x13\x2d\xb6\x7f\x1d\xb3\x2f\xe4\xb4\x4b\x3e\x8b\xf6\x45\x84\x0b\x32\x9d\x06\xaa\xa6\x17\xa1\xd2\xa2\x96\xd3\x74\x09\xe9\x0e\xb1\x74\xe9\x12\x20\x9a\x82\x25\x70\x08\x42\x18\xce\x34\x95\x98\x44\x97\xfc\x6c\x33\x2e\xb6\xc3\xa0\xec\xd2\x63\x62\x12\x15\x41\xca\xcf\x72\xfc\x40\x76\x0a\x5d\x5c\x19\xe8\xe2\x12\x12\x35\xdd\x02\x32\xe3\xac\x22\xbf\xbd\x27\xa7\x8e\xa1\xcc\xa4\x8f\x12\x85\x39\x05\xf9\xd1\x94\x4e\xa5\x5e\x69\x83\x07\xc1\x7f\x46\xd3\xe0\xb8\x7b\xdc\xde\x93\xa8\x29\x0a\x2c\x11\x34\x0d\x9a\x57\x7e\x36\xcc\x0d\xc3\x54\x75\x2c\x95\x72\xd1\x84\xe2\x7c\x41\xd7\x0c\x55\x8a\x37\x45\x97\x44\xf6\xcf\x4f\xd3\x72\x04\xaa\x4f\xab\x54\x8e\x8b\x32\x56\xa4\xc3\x68\x01\xa9\x47\xdc\x20\xf0\x13\xcb\xe7\xd8\x3f\x3f\x31\xc9\x87\x1d\x8f\x91\x44\x51\xf4\x19\xc9\xb6\x0e\xc8\x04\x58\x88\x4a\xa0\xd4\x6e\x24\xac\x4a\x48\xa5\x96\x53\xfa\x11\xe6\xc7\x16\x23\xe1\xda\x5b\xfa\x48\x18\xbd\xd4\x09\x00\xda\x1f\x6e\x0e\x24\xf2\x18\x29\x52\x9c\x9b\x99\x4a\x6d\xf4\x9c\x65\x2e\xc3\xbb\xfd\xb9\x13\x8d\xcc\x10\x68\x8c\x07\xd2\x98\xea\x85\xc4\x44\x20\x09\x77\xdc\xf3\xeb\x05\x5d\xa2\x48\x25\x58\x53\x07\xd4\x4d\x24\x9d\x1e\xf4\x13\x49\x27\x58\x47\xbd\xd3\x09\x56\xd4\x64\xaf\x64\x26\xfb\xd1\xb7\x6a\x14\x07\x55\x75\x08\x89\x5e\xb4\x1c\x42\x22\x58\xc1\xd1\x3b\x22\x22\x54\xa0\x1e\x5f\x80\x8a\x81\xe2\xac\x00\x20\x4d\xca\xba\xcb\x53\x65\x3b\xc8\x8d\x07\xe4\xc9\x26\xa9\x43\x54\x13\xe3\xa2\xa6\x52\x88\x55\xa4\x03\x43\x71\x3d\xaf\x60\x42\xe3\x56\xfe\xb7\x78\xb4\x87\xf7\x66\xbe\x50\x50\xbe\x3d\xb2\x28\x58\x45\xf1\x26\xfb\xb4\x27\x70\x07\x04\x9d\x96\x24\x20\x0b\x14\x0c\xb2\x9e\x24\xe3\x89\xd7\x39\x4d\x91\xc2\xd5\x92\xc7\x0a\x63\x0b\x99\x58\x9d\x12\x8b\x84\x49\x49\x81\xe5\x69\x9e\x86\x7a\x4e\x96\xcd\x6d\x4c\xb0\xdc\xec\xcf\xd1\x41\x02\x05\xd4\x08\xed\x2a\xf5\x0a\x15\x17\x91\xa2\x44\xd3\xf4\x65\x63\xa8\xe0\x82\x3a\x0d\x74\xa6\xae\x2e\xe9\xb6\x6b\x31\x07\xa5\x42\x50\x5e\x4e\x4c\xb9\x4d\xec\x58\xd7\x3b\xec\x70\xc2\xaa\x05\x82\x9c\xa2\x89\xf3\x27\xc6\x42\x90\xe1\x7d\xd6\xbd\x01\x11\xa9\x14\xe9\x27\x3a\xa3\xc0\x53\x22\x4c\x31\x0b\xfb\xea\x8f\xe3\xff\x97\x83\x13\xc7\xa3\xf3\x7c\x3e\x9f\x12\x8f\xbb\x9e\x75\x60\x6a\xa5\x59\x56\xcb\xf2\xab\xb8\x07\xe7\x01\xd9\xda\x9b\xe4\x1d\x3c\xe9\x50\xc2\x06\x61\x6e\x72\xc9\x6b\x51\x21\x69\x57\xd8\x63\x8e\x0d\x7a\x2a\xf4\x5b\x2b\x12\x6c\xd4\x2a\xdb\x85\x24\x3f\x7a\xb0\x4b\x56\xa9\xd8\xc4\x05\x39\x0d\xb0\x34\x13\xb3\x8e\x1b\xb1\xd0\xd3\x88\x9c\x76\xd6\x67\xb2\x73\x56\x58\xd1\xf2\xe0\x94\xa6\x52\xa4\x52\x22\x24\xe5\x4c\x73\x5e\xc2\x0b\x9c\xa0\x3b\x86\xc4\x9a\x87\x05\xc1\x50\x9a\xb3\xce\x98\x2b\xd0\x79\x2e\x05\x05\x67\x5d\xb7\x00\x08\xd0\xde\xdf\xa1\x02\xa4\xe8\x22\x2c\xbf\x92\xc9\x2f\xa4\x5f\xc9\xe4\xa1\x48\xb1\x94\x28\x31\xd9\x63\x59\x7b\x2e\xb9\x90\x4e\xba\xc6\x85\x24\x6c\x23\x66\x28\xde\x01\x0f\xef\x80\xdb\x00\x81\x42\xc4\x4a\x2c\xa4\x13\x27\x45\xa6\xb8\x73\x52\x2c\x2b\x90\x12\x54\x81\xa8\x40\x42\x66\x62\x96\x1f\xc5\xb2\x67\x84\x24\x1b\xcd\x36\x57\xf9\xa4\xe3\x28\xf0\xf3\xeb\xe1\x56\x48\x7a\x77\xe8\x25\x37\xb0\xca\x0d\x2a\x07\x69\xdc\x19\xee\x43\xe1\x3d\x6a\xd8\xa0\xf2\xdb\xe8\x3d\x03\x11\x1a\xac\xe4\xb7\x9a\x4a\x6e\x2d\xec\x57\xcf\x7d\x4b\x96\x38\xa5\x23\x56\x15\x63\xa8\x74\x2d\xa4\xeb\x99\xe7\x29\x2f\x29\x69\x2a\x41\xdd\x48\xc9\x57\x0e\x09\xb3\xfd\x8b\x9a\x98\xa5\x90\x1a\xa4\x83\x87\xf9\x1f\xf8\xf9\x39\x5b\x09\x8a\xf3\xb0\x80\x02\xfc\xcd\x33\x33\x72\x97\x7b\x9d\x5f\x9e\xd1\xf5\xee\xe0\xe2\x5f\xff\x7c\x00\x6d\xf3\xbd\xc0\x95\xd3\x95\x8c\xf6\xda\x51\x60\xe3\xf9\x42\x05\xab\x85\x20\x9c\x38\xc3\x23\x07\xc9\x05\xac\x16\xba\x8a\xcb\xae\x85\xcf\x07\x16\x17\x34\xc6\xb0\x1b\xe0\xba\x57\xbe\x38\x90\x60\x7b\x6d\x6d\xcc\x7f\xde\x8b\x65\x67\xad\x31\xf0\x3b\x36\x06\xe6\xd8\x18\x93\xde\x4d\xae\xc5\x4a\x48\x4a\x78\xc1\x5d\x62\x3a\x7f\xac\x1a\xce\x56\x8c\xfb\x64\xe1\xaa\xd8\x04\x39\x63\xd5\x71\xc1\xc5\x56\x78\x11\x26\x67\x5c\x3b\xb0\x6b\xce\x39\xad\xe4\xd2\xb1\x2d\x96\x7d\x53\xca\xce\x6a\xe2\x3c\xa2\xe6\xfa\xb5\xc6\xfd\xfb\xf5\x27\x1f\x99\x2b\x3f\x98\x0f\xde\xe7\xb7\x42\xb2\x94\x15\x4a\xd9\xda\x27\x0f\xab\x4f\x6e\x34\x2a\x0f\x6b\x9f\x7e\xf8\x6c\x6f\xd3\x1e\x4d\x27\x00\x5f\x65\xde\xbd\x69\x3e\x78\xbf\xba\xb3\x0b\xda\x5d\xbd\x6d\xdd\xe5\x15\x46\xd9\x5a\x6a\x5e\x5f\xae\xee\x7c\x63\x8f\xaf\x3c\xaa\x3e\xb9\x51\xdf\x5c\xae\x3f\xbe\x51\xbb\xbd\x5c\xfb\xe4\xbb\xda\x7a\x93\x75\x26\x01\xcc\xeb\x1f\x39\x62\x35\x9e\x7e\xde\xb8\xb3\xc6\x6a\xa0\xc6\xfd\xbb\x8d\xca\xd2\xb3\xbd\x35\xf3\xdf\xb7\xcc\xd5\xef\xea\x9f\xef\x98\x2b\x3f\xd4\x37\x97\xcd\xab\xdb\x8d\xaf\xbf\x34\x2b\x97\xcd\xca\xe5\xfd\x8f\xbf\xb2\xc9\x8c\x5b\x64\x38\xd3\xda\xd6\xba\x79\xf5\x8e\x79\xed\xa3\xc6\x8f\x8f\xb8\x00\x8d\xca\xa3\xda\x83\xf7\xed\xa5\x0e\x81\x46\xe5\xa1\x67\xb3\xd5\x27\x4f\xeb\x1b\xf7\xf6\xbf\xb8\x6d\x56\xfe\x55\xff\xfa\x3b\xf3\xea\xb6\x59\xb9\x7c\xf8\x6d\x02\x41\x69\x5e\x24\xe9\xc4\x24\x48\xa7\x32\x13\x39\x4c\x8f\x78\x44\xe6\x8c\x3c\x22\x03\x2e\xb3\x9b\x8e\x47\x5a\xb6\xe9\x95\x9f\xaa\x8f\x6f\x72\xf1\x38\xe3\xc6\xd3\x0d\xf3\xf3\xdb\x6c\x87\xfc\xb1\xca\xe5\xfa\xf6\x12\xd7\x87\x9b\xd0\xb3\xbd\xd5\x93\x88\x80\xcc\xe4\x14\x10\x73\xa2\x25\xda\xb1\x67\x7b\x57\x5a\x7a\xb0\x8d\x73\x46\xd7\x35\x1d\x98\x37\xd6\xcd\xdd\x8d\xea\xce\xba\x4d\xc8\x22\xc1\xd6\x36\xcf\x64\x63\x63\xed\x2e\x22\x8f\xbb\x71\xe9\xad\xc4\x5b\xd5\xb6\x3c\xee\x82\x72\x29\xeb\x68\xa3\xbe\xb9\xcc\x17\x01\x2c\x59\x7c\x9c\x45\xbc\x95\x62\x3b\x45\xab\x6d\x13\xf3\xb8\x2d\x6d\xbd\xdd\x69\x8d\xe9\x59\x81\x4a\xd9\xf3\xb0\x88\x84\x24\x95\xf8\x8d\x51\xcc\x21\xdd\xb9\x3d\x8d\x88\xa8\xe3\x92\xfd\xde\x47\xca\x0a\x49\xaa\x7b\xc3\x81\x8f\xb0\x40\xf9\x19\x2e\x22\xc2\x08\x5e\x22\xcd\x41\x29\x7b\x5e\x53\xb9\x28\x81\xb3\xa9\xf0\x29\xa1\x94\xb5\x0c\x15\xb0\xa0\x5d\xe4\xee\xa5\x69\x19\x3c\x9c\x71\x3a\x52\x26\x73\x6d\xa5\xf1\xf5\x97\xb5\xdb\xd7\xf7\x37\x3e\x6b\x54\x2a\xc3\x17\x91\x43\x22\x52\xc2\x4c\xa4\x84\xb0\x89\x29\xc0\x05\x35\xef\x3e\x68\x3c\xfc\x0a\xd4\x56\x6f\x36\x16\x57\xc0\xff\x2a\xf4\xc4\x4c\x6a\xf8\x62\x9f\x53\x29\xd2\x55\xa8\x44\x0a\x3e\x11\xad\xda\xcb\x2b\xfb\x7f\xbb\x37\x2a\xbd\x9e\xd7\xb8\x66\xdf\x80\xaa\xa4\xa0\x08\x21\x27\x23\x85\xac\xdd\xda\x36\xef\x2e\xd7\xaf\x5f\xe6\xa1\x13\xd4\xbe\xbf\x53\xdb\xba\xd2\xbc\xb1\x74\x5c\xdd\x59\xaf\x6d\x54\x6a\x6b\x4b\xf5\xcd\x65\x6e\x8c\xe1\xef\xe6\x34\x12\xf5\x72\x89\x46\x6a\x7b\x2a\x72\x23\x3c\xb0\x8f\x50\xdb\x06\x95\xc3\x05\x38\x16\xad\xe4\xad\x6f\x78\x82\x18\x41\x04\xc0\x6a\x21\xc2\xb3\xa2\x9d\x9f\x15\xb6\xa0\xf6\xe3\xdf\x1b\x95\x4f\x46\x20\x99\x16\x29\x59\xb4\xd3\x97\x34\xb5\x60\x67\xb0\x11\x84\x24\xde\x2e\x88\x10\x6e\x3c\x1a\x6a\x96\x2d\xeb\x9b\xcb\xae\xe2\x62\x04\x02\x92\x52\x84\x84\xd1\xa1\xc7\x91\x70\x00\x15\x0a\xc9\xb6\x34\x29\x24\xad\xac\x9d\x6d\x2f\x1f\xdc\x65\xc4\x50\x6a\xe1\xce\xdd\xb1\xde\x2b\xe1\x56\x99\xe9\x38\x62\x57\xf5\x8f\xbb\x4f\xe6\xe9\x85\x85\x55\x41\x01\xe0\x18\x0b\x3a\xa0\x7a\x8b\x22\xd7\xeb\xd0\x58\x7b\x0d\xe4\xaf\x8b\x5a\x95\xd1\x59\xf6\x9c\x53\x0b\xb1\x43\x8b\x73\xf3\x26\xcc\x21\xa5\xeb\x32\x29\xb0\x50\x0a\x2e\x95\x82\x0e\x92\x41\x48\xe6\x68\xc4\x52\x30\x52\x6d\xac\xb6\x4e\x64\x54\xb7\x90\xc1\xff\xf2\x93\x57\xc4\x73\x51\x73\x4d\xfc\x63\x09\x84\x21\x3f\x08\xfb\xbd\xed\x4b\x74\xf5\x19\xbb\xd9\x5f\xae\x4c\xd9\x21\xd3\xfa\x33\xe0\xee\x78\x29\x5f\x7d\x7a\xa7\xb6\x54\x01\xe6\xee\x35\x73\xf5\x96\xb9\x76\xd3\xbc\xfe\x21\xaf\xf4\x75\x02\xdb\x4e\x32\x83\xa8\xc1\x17\x06\x5c\x81\xc0\x35\xe6\xc3\x78\x97\x5e\xe5\xe9\xf1\x86\xf5\x71\xdb\x7c\xed\xa5\xf7\x29\x82\x44\x1d\xd1\x03\xf0\x2b\x7e\x94\x7d\x31\xe1\xd4\x6c\x4d\x79\xdb\xec\x1d\xc3\x74\x2b\x43\xbe\xdc\x90\xb2\xbb\xfb\xdd\x40\xaa\xd3\x2b\x85\x90\xd7\x06\x03\xe0\xae\x7e\xf5\xa7\xda\xe2\x52\x7d\x7b\x69\x84\x01\x9d\xd5\x17\xef\x4a\x90\xc2\x83\x8d\xe7\x76\x9f\x8d\xe9\xf0\x34\xa4\xb0\xab\xf8\x7e\x14\xf0\x88\x60\x35\xdf\x3e\xac\x3f\xfe\xd6\xbc\x7a\xaf\xfa\x64\xab\xd5\x50\x72\xf5\xa1\x0e\xc4\x79\x7b\x74\xe2\x68\x24\x05\x65\x83\x96\x46\x7f\x39\xad\xa6\x59\x43\x14\x11\x09\xf1\xc9\xce\xdd\xa6\xda\xea\x75\xf3\xea\x3f\x46\x70\x54\x87\x14\x0e\xd0\x70\x62\x1e\x56\xdb\xde\x33\xf7\xae\x8d\xb6\xef\x74\x4e\x3a\xaf\xd1\xb3\x9a\xa1\x86\xd4\x9f\x9d\x1b\x4f\xcd\x22\xb2\xba\xb3\x6e\x7e\xfb\xa9\xb9\x75\x6f\x14\x42\x9e\xc6\x84\xe1\x33\x42\xc8\x6e\xce\xa2\x5c\xc8\x6b\x95\xfa\xc6\x48\x84\x7c\x53\x13\xe7\xa3\x44\xec\xe6\x30\x8a\x25\xf3\xd1\xf7\xfb\x1b\x4b\xe6\xfd\xcd\xe1\x8b\x38\x6b\x85\xbf\xb3\x10\x47\x6a\x32\xba\x13\xc6\xc3\xe3\xa8\xe0\x68\x37\xb8\x3a\x89\xd8\xb1\xc7\x55\xdf\x5e\x1a\x40\xc4\x03\x3b\xd3\x77\xfd\x12\x7e\x80\x93\xfd\xfe\xe2\x66\x7d\xe3\x9e\xff\xd8\x1d\x95\x75\x82\x5e\xca\x07\xbd\x78\x0f\x2b\x23\x39\x4f\x6e\x91\x5f\x2b\x49\x0b\xa7\x54\xc7\x85\x02\xd2\xdf\x6d\xb6\x8a\xbb\x29\xa6\x0c\xac\xd2\xf1\x4c\x2c\xcb\xff\x0e\x5a\x4e\x7d\xb0\xbb\xbf\xf1\x99\xd3\xac\x06\x83\xb5\x01\x46\x71\x60\x69\xff\xc4\xa2\xfd\xdd\x6a\x34\xda\x38\xc2\xcd\x8f\xd7\x38\xe0\x58\x95\xb7\xb6\xf2\x6c\x6f\x0d\xd4\xae\x2c\xd6\xb6\xae\xd8\x2f\x5e\xd7\x56\xcc\x2f\x3e\xd8\xdf\x5a\xac\x3e\xfe\xaa\xf6\xed\x5d\x73\x6d\xc5\x7e\x03\x7b\x7b\xd9\x7c\xbc\xfb\xd2\x83\xf4\xe0\xc0\x69\x59\x67\x40\x4c\x76\xd8\xdc\xc1\x1c\x62\xac\x8d\xf1\x17\xfc\xd5\x27\x37\x46\xb8\x3d\xbc\x70\x00\x9d\x0f\xbe\x31\xe7\x03\x82\xda\xad\x9f\xea\x9b\xcb\x78\xc1\x5c\xdc\x03\xb5\x5b\xdb\xfc\x80\x55\x5b\xbd\x59\xdd\x59\xdf\xdf\x5a\xc4\x0b\xe6\xea\x67\xd5\x9d\xdd\xfa\x3f\x77\x0f\xf4\xb8\x35\xb2\x6c\xde\xf9\x3b\xa9\xde\xf3\xf8\xfe\xe2\x26\x3b\x02\x3b\x6f\xa3\xba\x49\xdf\x9e\xcf\xa5\x3c\x9f\x44\xb5\x85\x50\xfe\x9a\xcc\x13\xf4\x7a\x09\xd8\xde\x8f\x9f\xbc\x1f\x38\xb5\x73\xd2\x3a\x73\x8a\xb4\xcf\x98\x5b\xe9\xdd\x7e\xa7\x24\x67\xb8\x10\xde\xf8\x1d\xf6\xbf\x5a\x5a\x5f\x94\xb7\x05\xd7\x66\x00\xe7\x56\x04\x9e\xc8\x7d\x5e\xb3\x82\x84\x7d\x77\xea\xd5\x57\x9d\xeb\xdf\xc0\x05\xe8\xdc\x5c\x28\x53\xb9\x19\xcd\xa9\x94\x7d\x5d\x6b\x3d\x72\xa8\xb5\xe8\x8d\x0b\xce\xf5\xdb\x46\xae\xec\x0b\xfe\x6d\x61\xbf\x3d\xe0\x7b\x32\x96\x6e\x69\x4a\xd2\x8c\xa0\x34\x25\x65\xf9\x84\xdf\x05\x83\x9d\xbe\xd3\x13\x51\x73\x79\x45\x83\x01\x5d\x59\x67\x6a\x2a\xe0\x9c\x34\x00\xcd\xb3\x41\x53\xde\xa0\x12\xa0\x27\x8b\x60\x80\x9a\x22\x18\xf5\xb7\xdb\xfe\xa6\xc6\x03\xce\xe4\xfd\x93\xec\x4f\x45\x76\xbe\xf7\x51\xb3\xf3\x7f\x10\xa3\x77\x08\x22\x60\x01\xea\xd8\xfa\xef\x40\x0a\x52\x0b\x54\x06\x48\x15\x35\x16\x4c\x13\xe0\x9c\x8a\xf2\x79\x2c\x62\xa4\x52\x90\xd7\x74\x67\x06\xa8\xa8\x00\x29\x5e\x40\x40\xb5\x5a\x4d\x04\xfc\x67\xf1\x06\xc0\x79\x50\xd6\x0c\x1d\x58\xe5\x17\xc0\x04\x28\x78\x1e\x29\x65\x40\x35\x20\x43\xb6\xb6\xf9\x90\xe5\xd8\xe4\x28\x30\x08\x02\xc4\x92\x0e\x60\x95\x50\x04\xa5\x44\xb0\x98\x11\x3b\xc0\x6a\x88\x0e\xa3\x26\xfa\x21\x86\x0a\x41\x5f\xab\xb0\xc9\xd7\x70\x41\x35\x8a\x40\xd3\xc1\x59\x7c\x89\x5d\x1d\x86\x04\xe8\xe8\x3d\x03\xeb\x48\x3a\xd2\x8f\x19\xa7\x26\x82\xcd\x18\xe6\x89\x2f\x86\x19\xa7\x26\x3a\x9b\x31\x6c\x07\x4a\xe0\x57\x17\xf6\x43\xc9\xc8\xd9\xbe\x48\x32\x6b\x26\x9b\x15\x56\xb8\x51\x7b\x36\x9e\x11\xe6\x84\x46\xdf\x5e\x18\xfc\x4c\x14\xbd\x28\x18\x47\xe8\x32\x8a\xa4\xf1\x42\xb8\x86\x11\xe6\x1b\x46\xdf\xce\x11\xbe\xdd\x61\x43\x35\x8a\xa6\x31\x0c\xb0\x0e\x4d\xcd\x24\x0c\xc4\xa4\xff\x54\x32\x8b\x0b\x2a\x92\x00\x56\x29\x8f\x1b\x09\x30\x27\x23\x82\x40\x51\xd3\x11\x70\xc2\x93\x52\xe6\x8f\x20\x7f\x68\xa2\x32\x54\x81\x8e\x0a\x06\x2b\x22\x2d\x39\xc8\xaf\xd9\x82\xdb\x2a\xd0\x25\x48\xff\xf9\x62\xe8\xb6\x9a\x9a\x88\xb0\xd5\x2f\x3d\x25\xe4\xf1\x25\x24\x05\xba\x93\x3d\x13\xcc\xed\xa4\x72\x11\x96\x09\xc8\xb3\x54\x6c\x35\x3a\x12\xe0\x2d\x8f\xfe\xb9\x96\x0d\xbb\x7e\xca\xdb\xe9\x18\x40\x1d\x01\x2d\x4f\x91\x0a\x0a\x3a\x82\x14\xe9\x7c\x5d\xe6\x4f\x99\xe3\x43\x4e\x25\x3f\xd7\x2c\x62\xa9\x3d\xd0\x67\xec\x99\x48\x83\x58\xff\xf5\xbc\x93\x45\x58\x29\xd4\xd9\x22\x93\x53\xbf\xa4\xf4\xd3\x7b\xe8\x0a\xf7\x0c\xd2\xa3\x6b\xfc\x9a\x08\x6c\x6d\x06\xa7\x82\x5e\x71\xfd\xd2\xc6\xea\x9c\xa6\x29\x01\x0a\x64\xc3\xbd\xf4\x18\xc2\xd7\xb3\x19\x04\x03\x3a\xf8\x5d\x4d\x0e\x95\xdb\x9c\x6e\xa0\x53\x0a\x24\x24\x79\x16\x2a\x84\x5f\xf6\x8e\x3a\xbb\x59\xed\xc7\x5c\x84\x71\x4e\x02\x3e\x0b\x8a\x06\xa1\x00\x72\xfc\xd9\xbf\x1b\x01\xac\x5f\xba\xb3\x2b\x0b\x89\x79\xc7\xb1\x78\x0e\x53\x70\x72\xf6\xd4\xb9\x73\xd6\x2f\x83\x84\xa0\x33\x8a\xe1\x6c\xc4\x1c\xa1\x7a\xd2\x50\x31\x63\xd7\x3b\xe1\x7e\xe7\xb8\x40\xe0\xb0\xb5\xd9\xde\x7d\xdd\x7e\xff\xe1\xb7\x77\xb9\xd9\xeb\xf4\x4d\xbd\x05\xcb\x8e\x8a\xa1\x5a\x06\x50\xcf\x61\xaa\x43\xbd\x0c\x08\x7a\xcf\x40\xaa\x68\xfd\xb8\x47\x94\xfb\x47\xba\x5b\x99\xa2\x0e\x4a\x0e\x9e\xf8\xc3\x1f\x19\xcb\xbe\x89\x76\x54\xb0\x05\x9b\xf8\xf1\xd7\xce\xcd\x75\xa7\x65\xcf\xbb\x0b\xd7\x57\x06\x42\x92\x0f\x0b\x49\xfb\xd7\x1d\xff\x1b\x00\x00\xff\xff\x3c\x62\xa1\x32\xef\x51\x00\x00")

func serviceDocHtmlGatewayHtmlBytes() ([]byte, error) {
	return bindataRead(
		_serviceDocHtmlGatewayHtml,
		"service/doc/html/gateway.html",
	)
}

func serviceDocHtmlGatewayHtml() (*asset, error) {
	bytes, err := serviceDocHtmlGatewayHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/doc/html/gateway.html", size: 20975, mode: os.FileMode(420), modTime: time.Unix(1685436935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceDocHtmlIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3f\x4f\xc4\x30\x0c\xc5\xf7\xfb\x14\x26\xea\x08\xe7\x15\x21\x37\x0b\x07\x2b\x0c\x65\x60\x34\x8d\xaf\xad\x2e\xfd\xa3\x34\x27\x38\x9d\xfc\xdd\x51\x9a\x56\x62\x42\x88\x29\x4f\xfe\x3d\xfb\x39\x09\xdd\x1c\x5e\x1e\xab\xf7\xd7\x27\x68\x63\xef\xed\x8e\xd2\x01\x9e\x87\xa6\x34\x32\x98\x54\x10\x76\x76\x07\x00\x40\xbd\x44\x86\xba\xe5\x30\x4b\x2c\xcd\x5b\xf5\x7c\x77\x6f\x56\x14\xbb\xe8\xc5\x1e\xc6\x9a\x30\xcb\x1d\x61\xee\xa4\x8f\xd1\x5d\x16\xd7\xf5\x0a\x45\x0f\x0f\x25\xec\xfb\xd1\x9d\xbd\x80\xea\x56\x9e\x82\x1c\xbb\xaf\x85\xad\x32\xb3\x04\x03\x0f\x8d\x40\x71\xba\x2d\xba\x28\xb9\xbf\xe1\x28\x9f\x7c\xd9\x4c\x34\x59\x62\x68\x83\x1c\x4b\xf3\x63\x9a\x2a\xba\xb1\x9e\x71\x75\x63\x42\x27\x50\x35\x36\xa9\x34\x6c\x5f\xa5\x5d\x41\x95\x90\x2d\xe1\x64\xb7\x4c\x19\xdc\xef\x1b\x9c\x83\x9f\xff\x18\x9f\xaf\xad\xfa\x8f\x7c\xc2\xfc\x78\x84\xcb\xef\x7c\x07\x00\x00\xff\xff\x18\xf4\x54\xb8\xad\x01\x00\x00")

func serviceDocHtmlIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceDocHtmlIndexTmpl,
		"service/doc/html/index.tmpl",
	)
}

func serviceDocHtmlIndexTmpl() (*asset, error) {
	bytes, err := serviceDocHtmlIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/doc/html/index.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(1685456553, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/doc/html/gateway.html": serviceDocHtmlGatewayHtml,
	"service/doc/html/index.tmpl":   serviceDocHtmlIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"doc": &bintree{nil, map[string]*bintree{
			"html": &bintree{nil, map[string]*bintree{
				"gateway.html": &bintree{serviceDocHtmlGatewayHtml, map[string]*bintree{}},
				"index.tmpl":   &bintree{serviceDocHtmlIndexTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
