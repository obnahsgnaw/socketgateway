// Code generated for package asset by go-bindata DO NOT EDIT. (@generated)
// sources:
// service/doc/html/gateway.html
// service/doc/html/index.tmpl
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceDocHtmlGatewayHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\x6b\x6f\x14\x47\xb6\xdf\xfd\x2b\xea\x0e\xca\x55\xa2\x30\x0f\x8f\x1f\xf8\x9a\xf6\x5c\x11\x08\x09\xab\x0d\x8b\x82\xb3\xd2\x6a\xb5\x1b\xd5\x74\xd7\x4c\x97\xdc\xd3\x3d\xe9\xae\x36\xcc\xae\x56\x72\x88\x0d\x36\xb1\xc1\x04\x93\x10\xe3\x10\x50\x48\x82\x88\xf0\x24\x1b\x22\x8c\xc1\xeb\xff\xb2\x3b\xdd\x33\xfe\xc4\x5f\x58\x55\x57\x3f\xa7\x1f\xf3\xb0\x0d\x24\x20\x24\x4f\x77\x9d\xaa\x73\x4e\x9d\x77\x9d\x9a\x81\xfb\x9f\x63\x7f\x38\x3a\xf9\xa7\x53\x6f\x03\x91\x54\xa4\xc2\xc0\x00\xc7\x3e\x01\xe0\x44\x04\x05\xfa\x00\x00\x47\x30\x91\x50\xe1\x94\xaa\x10\x85\x57\x24\x70\x4c\xe1\xf5\x0a\x92\x09\x24\x58\x91\xb9\x2c\x83\xb2\x99\x15\x44\x20\xe0\x45\xa8\x6a\x88\x4c\xa4\x3e\x98\x3c\x9e\x1e\x4b\xd9\x20\x09\xcb\x53\x40\x45\xd2\x44\x4a\x23\x35\x09\x69\x22\x42\x24\x05\x48\xad\x8a\x26\x52\x04\x9d\x25\x59\x5e\xd3\x52\x40\x54\x51\x69\x22\x25\x12\x52\xd5\xc6\xb3\xd9\x92\x22\x13\x2d\x53\x56\x94\xb2\x84\x60\x15\x6b\x19\x5e\xa9\xd0\x79\xff\x5f\x82\x15\x2c\xd5\x26\x3e\x28\xea\x32\xd1\xc7\x87\x73\xb9\x83\x87\x72\xb9\x83\xc3\xb9\x1c\x26\x50\xc2\x7c\x2a\x6b\x13\xb5\x48\xb1\x67\x00\x8a\x8a\x50\x03\x7f\xb7\x5f\x00\x38\x83\x05\x22\x8e\x83\xd1\x1c\xaa\x1c\x76\x07\x2b\x50\x2d\x63\x79\x1c\x0c\xa2\x0a\x80\x3a\x51\x3c\x08\xaf\x48\x8a\x3a\x0e\x0e\xe4\xf3\x79\x6f\x90\x32\x98\x66\xcc\x8c\x83\x14\x63\x27\x75\x10\x68\x50\xd6\xd2\x1a\x52\x71\xc9\x9b\x5a\x85\x82\x80\xe5\x72\xba\xa8\x10\xa2\x54\xc6\xc1\xb0\x47\xf6\x1f\x03\xf6\x83\x38\xe8\xe3\xcf\xc2\x7d\x06\xe1\xb2\x48\xc6\x81\xac\xa8\x15\x28\x79\xd8\x8a\x8a\x2a\x20\xd5\x45\x36\x58\x3d\x0b\x34\x45\xc2\x02\x38\x00\x21\x8c\x27\x9a\xcb\x8c\xa0\xb3\x61\xb2\x79\x1f\xd9\xbd\xc0\xec\x93\x63\x66\x04\x55\x40\x2e\x4c\x72\xe8\xb9\xec\x14\xfa\xa8\x52\xa3\x4b\x0b\x88\x57\x54\xcb\x90\x29\x65\x19\x85\xf5\x3d\x32\x7a\x08\xe5\x47\x42\x98\x08\x2c\x4a\x28\x6c\x4d\x83\xb9\xdc\x6b\x6d\xe6\xa1\xe1\xbf\xa1\x71\x30\xe6\x1f\xb7\xf7\xc4\x2b\x92\x04\xab\x1a\x1a\x07\xce\x53\x98\x0c\x75\xc3\x38\x51\x1d\xca\xe5\x7c\x38\x21\x3f\x55\x56\x15\x5d\x16\xd2\x0e\xeb\x02\x4f\xff\x85\x71\x5a\x8e\x40\xd4\x71\x99\x88\x69\x5e\xc4\x92\xf0\x3a\x9a\x46\xf2\x1b\x7e\x23\x08\x23\x2b\x15\xe9\xbf\x30\x32\x21\x64\x3b\x01\x25\xf1\x3c\x1f\x52\x92\xad\x1d\x90\x8f\xd0\x10\x11\x40\xb5\x5d\x49\x58\x16\x90\x4c\x2c\xa7\x0c\x5b\x58\xd8\xb6\x28\x0a\xdf\xde\x06\xdf\x88\xc3\x97\x3b\x0c\x40\xfb\x62\x67\x20\x53\xc2\x48\x12\xd2\x4c\xcd\x44\x68\xc3\xe7\x4e\xf3\x29\xde\xef\xcf\x9d\x70\xe4\xf7\x00\xc7\x50\x24\x8e\xd1\x5e\x50\x0c\x47\xa2\xf0\xc7\xbd\xb0\x5c\xd0\x59\x82\x64\x0d\x2b\xf2\x2e\x65\x93\x88\xa7\x07\xf9\x24\xe2\x89\x96\x51\xef\x78\xa2\x05\x35\xd2\x2b\x9a\x91\x7e\xe4\x2d\xeb\x95\xdd\x8a\x3a\x06\x45\x2f\x52\x8e\x41\x11\x2d\xe0\xe4\x1d\x69\x3c\x94\xa0\x9a\x9e\x86\x92\x8e\xd2\xb4\x00\xd0\x1c\xcc\xaa\xcf\x53\x45\x3b\xc8\x0d\x45\xe4\x49\x07\xd5\x01\xa2\xf0\x69\x5e\x91\x09\xc4\x32\x52\x81\x2e\xf9\xd6\x4b\x58\x23\x69\x2b\xff\x5b\x34\xda\xc3\xbb\x93\x2f\x24\x54\x6a\x8f\x2c\x12\x96\x51\xda\x21\x3f\x18\x08\xdc\x11\x41\xc7\xe3\x04\x14\x80\x84\x41\x21\x90\x64\x02\xf1\xba\xa8\x48\x42\xbc\x58\x4a\x58\xa2\x64\x21\x65\xab\x53\x62\x11\xb0\x56\x95\x60\x6d\x9c\xa5\xa1\x9e\x93\xa5\xb3\x8d\x61\x9a\x9b\xc3\x39\x3a\x8a\xa1\x88\x1a\xa1\x5d\xa4\x41\xa6\xd2\x3c\x92\xa4\x64\x9c\xa1\x6c\x0c\x25\x5c\x96\xc7\x81\x4a\xc5\xd5\x25\xde\x76\x29\x16\xa1\x50\x8e\xca\xcb\x99\x51\xbf\x8a\x5d\xed\x06\x87\x5d\x4a\x58\xb6\x8c\xa0\x28\x29\xfc\xd4\xe1\x81\x18\xcb\x08\xae\xf5\x6f\x80\x47\x32\x41\xea\xe1\xce\x56\x10\x28\x11\x46\xa9\x86\x43\xf5\xc7\xd8\xff\x15\xe1\xf0\x58\x72\x9e\x2f\x95\x72\xfc\x98\x6f\xad\x6b\xa6\x56\x9a\xa5\xb5\x2c\x7b\x4a\x07\xec\x3c\x22\x5b\x07\x93\xbc\x6b\x4f\x2a\x14\xb0\xae\x51\x37\x39\x1b\xd4\x28\x97\xb5\x2b\xec\x01\x57\x07\x3d\x15\xfa\xde\x8c\x0c\x1d\xb5\xca\x76\x2e\xcb\x8e\x1e\xf4\x91\x56\x2a\x36\x72\x4e\x1c\x04\x58\x98\x48\x59\xc7\x8d\x54\xec\x69\x44\x1c\x74\xe7\xe7\x0b\x93\x56\x58\x51\x4a\xe0\xa8\x22\x13\x24\x13\x8d\xcb\x8a\x79\x07\x2e\xe0\x69\x86\xd0\x1f\x43\x52\xce\x61\x81\xd3\x25\x07\xea\x8e\xf9\x02\x5d\xe0\x91\x93\x70\xc1\xf7\x0a\x00\x07\xed\xfd\x1d\x28\x43\x82\xce\xc0\xda\x6b\xf9\xd2\xf4\xe0\x6b\xf9\x12\xe4\x09\x16\x32\x55\xca\x7b\xaa\x60\xc3\xb2\xd3\x83\x59\xdf\x38\x97\x85\x6d\xc8\x74\x29\x38\x10\xa0\x1d\xf1\x1a\xc1\x50\x0c\x5b\x99\xe9\xc1\xcc\x11\x9e\x0a\xee\x84\x90\x2a\x70\x5a\x15\xca\x80\x97\xa0\xa6\x4d\xa4\x2c\x3f\x4a\x15\xde\xe6\xb2\x74\xb4\xe0\xcc\x0a\x71\xc7\xac\x20\x4c\xaf\x87\x57\x2e\x1b\xdc\x61\x10\xdd\xae\x45\xae\x13\x31\x4a\xe2\xee\x70\x1f\x02\xef\x51\xc2\x3a\x11\xdf\x47\x1f\xe9\x48\x23\xd1\x42\x7e\xcf\x11\xb2\x37\xb1\x5f\x39\xf7\xc3\x99\x56\x55\x64\x0d\x75\xc3\x1a\x9b\xb9\x1f\x36\xf0\x4c\x4d\xa2\x0a\xf9\x29\x58\x46\x11\x56\x11\x80\xec\xbb\x61\xbc\xc3\x1e\xdf\x56\x55\x45\x4d\x16\xbf\x7f\xe6\xb3\x31\x0d\x9b\xe2\x29\x26\x90\xae\xb8\xb3\xe7\xee\x91\x79\xf4\x2f\xca\xcc\x69\x02\x89\xae\x25\x07\xb4\x88\x05\xbf\xbe\xd8\x56\xc5\x72\x39\xca\x8a\xdd\xe1\x7d\x37\xe1\x53\x58\x2e\x77\x15\xdb\x7c\x13\x9f\x8d\x01\x9f\x52\x28\xc1\x6e\x62\x9b\x7f\xe6\x8b\x13\xdb\xe8\x5e\xbd\x8d\x85\xcf\x4c\xa9\xc2\x69\x6b\x0c\xfc\x91\x8e\x81\x49\x3a\x46\xb9\xf7\xa3\xf3\x48\x71\x59\x01\x4f\xfb\xcb\x34\xf7\xc3\xaa\x83\x6c\xc1\xf8\xab\x73\x5f\xd5\xc3\x89\x79\xab\x16\x8a\x2e\x58\xe2\x0b\x19\x31\xef\xdb\x81\x5d\xb7\x4d\x2a\x55\x9f\x8c\x6d\xb6\xec\x97\x6a\xe1\xb4\xc2\x4f\x21\x62\x2c\x5d\x6e\xad\xaf\x37\xb7\xae\x18\x73\x3f\x1b\x3f\x9d\x63\xaf\x5c\xb6\x5a\xe0\xaa\x05\xf3\xda\x83\xc6\xd6\xd5\x56\xfd\x81\x79\xfd\xd2\xd3\x27\xab\xf6\xe8\x60\x06\xd8\x8b\x1e\x5f\x35\x6f\xce\x36\x36\x36\x41\x30\x28\x3d\x7d\xb2\x08\x5a\xf5\x87\xe6\x4f\xe7\x8c\xcf\x16\x8d\xab\x4b\xc6\xe6\xca\xce\x27\x5b\xe6\xf5\x7a\x6b\xfb\xcb\xc6\xc6\x3d\xb6\xec\x20\x30\x16\xe7\x8c\xe5\x1f\xa0\x55\xec\x00\x2c\x00\xe3\xb3\x45\x20\x40\x02\xe9\x72\x77\xb4\xb1\xb1\xd9\xd8\x58\x35\x2e\xde\x36\x6f\x5d\x68\xd5\xcf\x53\x18\x9d\xe3\x0d\x5f\xfb\xd1\x5c\x5a\x37\x2f\x2f\xdb\xcc\xe5\x33\xc0\xdd\x8b\xb9\xb6\x30\xd4\xd8\xb8\xd7\xd8\x78\xcc\xf8\xa5\x8b\xa9\xbb\xa6\xab\x8a\x5c\x3e\x48\x0f\xce\xb4\x02\x48\x43\x3b\xdd\x1e\x04\x65\x37\x4e\xd9\xd8\x86\x32\xc0\x98\x9b\x6f\x7d\xff\x8d\x79\x73\xd9\x13\xd1\xe2\x1c\xdb\xc2\xd3\x27\x8b\xad\x87\x5f\xb7\xb6\x6f\xf8\x39\x64\x9c\xb3\x25\x46\xfd\x91\xb1\xb9\xd2\x5c\x9d\xa5\x2c\xb3\x35\x36\xe2\xe1\x0c\x30\xbe\x3b\x67\xde\x5c\x33\xd7\x16\x5a\xeb\x77\x5a\xf5\x8f\x9f\x3e\x59\x34\x96\xaf\xb8\x44\x5a\xdb\x37\x5a\xb7\x17\x29\x6b\x1e\xf8\x5f\x5f\x18\xf3\x3f\x36\x6f\x6c\x18\x73\x3f\x37\x57\x67\x8d\x8b\xb7\x5a\xdf\x7f\x63\xd4\xcf\x1b\xf5\xf3\x3b\x9f\x7d\x6b\x23\x1e\xc9\x00\x63\xf9\x8a\xb1\x3c\xdb\xd8\xb8\x67\xae\x2d\x19\x17\x6f\x1b\x97\xaf\xb4\x7e\x79\xc8\x24\xc0\xb4\x62\x4f\x65\x88\x23\xb4\xdb\x78\x7c\xa9\xb9\x72\xd7\x9c\x7f\xd8\xd8\xb8\x6f\x6c\x7f\xd2\xba\xf4\xd0\xb8\xfc\x79\x73\xe5\x6e\x63\xf3\x12\x5b\xd3\x5c\x9d\x25\xca\x14\x92\x3d\x99\x33\x22\x94\xdd\x80\x01\xb9\x3c\xb6\xea\x0f\x02\x24\xcc\xb5\x7b\x0c\x55\xe3\xd1\xa7\xc6\xc2\xd2\xce\xcc\x6a\x6b\xfb\x82\x71\x63\xd3\x58\x5f\x65\xdb\x61\xfb\x77\xd7\x3f\x7d\xb2\x68\xd6\x57\x8c\xef\xce\xb9\xfa\xb3\xd4\xd7\xbc\xbf\xe0\xf1\xe0\x21\x5c\xbe\xb4\x73\xe1\x42\x73\xe5\xae\xbd\xc3\xed\x15\xe3\xc6\x4d\x2a\x31\x0b\xb3\xf9\x55\x18\xf9\x3c\xb3\x45\xcf\x3a\x9e\x3e\x59\xf0\x99\x80\x33\x11\x4f\x37\xef\x2f\xb4\xb6\xb7\x8c\x8b\xb7\x8c\xf9\x1f\xe9\xdf\xfa\x79\x63\xf9\x12\xb3\x41\x4a\x60\xf9\x52\xf3\x87\xfa\xd3\x27\xf3\x63\x8d\xad\xa5\xff\xcc\x7c\x3c\x38\xda\xd8\x5a\xa2\x56\x67\xde\x7a\x64\x2e\xad\xbb\x78\xcc\xcf\x1f\x99\x3f\x5f\x6b\xde\x5e\x37\xd6\x57\x6d\x4a\xce\x79\x72\x60\xa0\x3d\x34\x89\x43\xfe\x78\x10\x3c\x45\x78\x27\x05\x71\xc8\x17\x42\xaa\x05\xd7\x8e\x9a\xab\xb3\x47\x1c\x5f\xb2\xe8\xb8\x93\x58\x1b\xc8\x0e\x46\x5e\xcb\x29\x15\x08\x97\xc4\xbb\x99\xf2\xc6\xd4\x02\x47\x84\xc2\x49\x58\x41\x5c\x96\x08\xec\x45\xaf\x14\x91\xea\xbe\x1e\x43\x1a\xaf\xe2\xaa\x7d\x67\x25\x14\xb8\x2c\x51\x83\x61\x38\x84\x98\x23\xec\xfc\x99\x10\xd9\xb9\x20\x12\x67\x50\x28\x9c\x54\x64\xc6\x4a\x24\x34\x17\x0f\xe2\xaa\x05\x4b\xcd\x11\x13\xda\x59\xee\x9e\x9b\x77\x7c\x51\x24\x8e\xf0\x60\x22\x4f\xd4\x0c\x81\xf9\xcb\xa7\xad\xfa\xb5\xbd\x67\x8f\x16\x07\x09\x8c\x3d\x4f\xce\x94\x44\xce\xf2\xc9\x9c\xd1\x98\xc0\x92\xcd\xde\x73\x66\x1f\x16\x13\x98\x1b\x4a\x64\xce\x0d\x9b\xbe\x00\xbc\x0f\x0c\x6a\xd5\x04\x0e\x87\xbb\xe3\x70\x17\x22\xe4\xb2\x6d\x3e\xcc\x65\xad\x90\x52\x68\x8f\x6d\xfe\x18\xb7\x27\x05\x52\xe7\xb6\x43\xef\xe5\x91\x97\x8a\x2d\xd1\x04\x82\xb4\xc7\x4b\x38\x38\xfb\x1b\x10\x81\x26\x43\x5c\x88\x8e\x30\x8e\x81\xa8\x53\x4b\x30\x62\xfb\xee\x99\x52\xed\x01\x3a\x1c\xb4\xbd\xb0\x7d\x9c\xae\x73\x03\x35\xad\x64\xdd\x97\xdf\xc3\x22\x92\xba\x8e\xe1\x91\x51\x3c\x3a\x8e\x47\x9d\x2e\xa2\x2c\x99\x59\xa3\x5d\x5a\x44\x19\xab\x6d\xae\x5e\xa5\x4e\x54\xcb\x38\xd8\x27\xab\xc8\x13\xd6\x25\xc1\x1c\x17\xb0\xa8\x83\x38\xfb\x8f\xf2\x80\xd0\x91\x23\x24\x01\xd7\x0f\xfc\x67\xd0\x76\x15\x77\x36\x2a\xe7\x7c\x15\xec\x0f\x75\x34\x2b\xcf\xa3\x5f\x6a\xb3\xd2\x74\x9e\x47\x9a\xd6\x9d\x61\x15\x15\x45\x4a\x15\xe8\xdf\x5d\x1a\x95\x39\xbf\x6c\x5c\xfc\xba\xb5\x7d\xdd\xbc\x5e\x37\xee\xfc\xd4\x7a\xf0\xed\x6e\x6c\xab\xc3\x16\x79\xb5\x56\x25\x1f\x4e\xa1\x5a\x97\x9b\xac\x11\x7a\xb4\xb5\x3e\x76\xb9\x4d\x5a\xf9\x3e\xbe\x6f\x5c\xbc\xdb\xd8\x5a\xb3\x2a\xed\x47\xcd\xef\x9d\x02\xd9\xaa\xba\x9f\x8b\x47\xed\x77\xde\xe9\xba\xb7\xb9\x8b\xec\xb3\x33\xb3\x4a\x4f\x32\xa1\xd4\x90\x14\x2e\x82\xbd\xce\x60\x3f\x33\x2e\x5c\x30\x3a\x3b\x2b\x5f\xb6\xea\xf5\x57\x11\x83\x45\x0c\xbb\x53\xd9\x8d\x2f\x75\x6a\x8f\xc6\xb4\x40\x77\xe1\x72\xfb\x18\x47\x88\x8a\xcb\x65\xa4\x7e\xc8\x7a\x19\xdd\x09\x40\xc7\x32\x19\xca\xa7\x0a\xec\x73\xb7\xe1\xe4\xc2\xe6\xce\xca\x97\xcd\xd5\x59\xaf\x3b\xf4\x82\x65\xe4\xf6\x96\x7d\x7b\x5b\x3e\xd9\xcd\xda\xba\x63\x34\x62\x2e\xce\x59\x8d\x82\x85\x19\x73\x6d\x81\xf5\x50\x8c\xc5\x39\xe3\xab\x0b\x3b\x6b\x33\x8d\xc7\xdf\x9a\xf7\xef\xb8\x6d\x27\xf3\xe6\xac\xf1\x78\xf3\xa5\xf7\xce\xe7\x67\x9c\x96\x76\x76\x69\x93\x1d\x36\x27\x40\x02\x9f\x7d\x12\xb7\x36\xc6\xba\x59\x8d\xad\xab\xcf\x35\x65\xbb\xab\x92\xb3\x5b\x72\x7c\x6d\x73\xc2\x57\xfd\xaf\x76\xd0\xbe\xf4\xbf\xec\x18\xb8\x8b\xfe\x97\xb1\x38\xc7\x1a\xe8\xac\x1c\xd9\x87\x76\x89\x15\x3b\x12\x39\x4c\xee\x36\x79\x79\xc9\xee\xf4\xb3\xd2\xde\x9c\xff\xbc\x35\x33\x07\xfe\x57\x22\x87\x27\x72\x7b\xcf\xf6\x09\x99\x20\x55\x86\x52\x22\xe3\xc9\x7d\x1e\xe3\xfc\xdc\xce\x27\x77\xf7\x4b\xae\x27\x15\x26\xd9\x77\xa1\x2c\x48\x28\x81\xc9\x91\x44\x26\xcd\x2f\x6e\x19\x77\x66\x9b\xcb\xe7\xd9\x0d\x06\x30\xff\x79\xdb\x5c\x5b\x70\x5e\x2c\x19\x37\x36\x96\xcc\x95\xba\xb9\xf8\xb1\x5b\x24\xec\xfd\x6e\x8e\x21\xeb\x40\x95\x28\xed\xd1\xe4\xae\x9a\xd5\xee\xdf\x47\x69\xeb\x44\x8c\x67\xe0\x50\xb2\x90\x9d\x2b\x98\x5f\x57\xaf\xaf\x8b\x6b\xf8\xde\x4f\x5b\x3b\x33\xab\x8d\xed\xdb\x5e\x5f\xbb\x9b\x34\x14\xb8\x8d\x0f\xdc\xb8\xb7\xa5\x1d\xd6\x70\x0f\x54\x6b\xbd\x54\x9a\xc1\xbb\xf5\xe0\xfd\x79\x3b\x25\x25\x44\xc9\xaf\xf6\x97\xa3\x2e\x24\xb8\x82\x34\x02\x2b\x31\xbd\xf0\xd0\xc1\xcd\xfa\xc1\x13\x33\x9d\xa2\x5e\xca\x4c\x3a\xcb\x53\x85\x58\xd0\x73\x3c\xb9\xed\x4f\x2f\xc4\xfa\xeb\x38\x5b\xb7\x5f\x7f\x10\xf3\x8c\x8b\xa0\x61\xc5\x7d\xe1\xdc\xfb\xb2\x67\x9b\xd6\x1d\xcb\x62\x72\x06\x01\x93\x3a\xa9\x58\x55\xad\xfd\x76\xf4\xcd\x37\xdd\xe7\xdf\xc1\x69\xe8\xbe\x9c\xaa\x11\xd1\x31\x33\x22\x14\xde\x51\xbc\x25\x07\xbc\x49\xef\x9e\x72\x9f\xdf\xd7\x8b\xb5\x90\x55\xb6\xd9\x63\xbb\x25\x06\x5c\x49\xb5\x24\x25\x28\x7a\x94\xff\x08\x05\x06\x08\xab\x38\xda\x38\x3a\xad\x48\x82\x95\x24\x05\x92\x04\xd0\x68\x44\x39\xb0\x0b\x9c\xc7\xa3\x40\x41\xa3\x8d\x90\x93\x85\x30\x42\x4c\x09\x84\xfa\xdb\x6d\x7f\xa0\xa1\x88\x5a\xaf\x7f\x94\xfd\x89\xc8\x3e\xa0\x86\xb0\xd9\x07\xd6\x28\x42\x1f\x68\x48\x03\xd3\x50\xc5\xd6\x37\xf5\x25\x24\x97\x89\x08\x90\xcc\x2b\x34\x89\x66\xc0\x09\x19\x95\x4a\x98\xc7\x48\x26\xa0\xa4\xa8\x2e\x04\xc8\xa8\x0c\x09\x9e\x46\x40\xb6\x0e\x2d\x1a\xf8\xf7\xcc\x55\x80\x4b\xa0\xa6\xe8\x2a\xb0\xf2\x02\xc0\x1a\x90\xf0\x14\x92\x6a\x80\x28\x40\x84\x74\xae\xb3\xc8\x72\x6c\xed\x20\xd0\x35\x04\x34\x8b\x3b\x80\x65\x8d\x20\x28\x64\xa2\xd9\x4c\xd8\x01\x96\x63\x64\x98\x04\xe8\x07\x19\x2a\x47\x15\xa3\x14\xf8\x16\x2e\xcb\x7a\x05\x28\x2a\x38\x8e\xcf\xd2\xa7\xd7\xa1\x06\x54\xf4\x91\x8e\x55\x24\xbc\xd1\x8f\x1a\x47\x87\xa3\xd5\x18\xe7\x89\x2f\x86\x1a\x47\x87\x3b\xab\x31\x6e\x07\x52\xe4\xbd\xbd\xbd\x28\x9b\x08\xed\x0b\x25\xd5\x66\xd6\xb9\xf2\x8b\x57\x6a\xcf\xca\xd3\xe3\x9c\x50\xef\xdb\x0b\xa3\xd7\x24\xe1\x4b\x32\xe3\x04\x59\x26\xa1\xd4\x5f\x08\xd7\xd0\xe3\x7c\x43\xef\xdb\x39\xe2\xb7\xbb\xd7\xa6\x9a\x84\x53\xdf\x0b\x63\xdd\x33\x31\x6b\x71\x46\xac\xf5\x9f\x4a\x4e\xe3\xb2\x8c\x04\x80\x65\xc2\xe2\x46\x06\x4c\x8a\x48\x43\xa0\xa2\xa8\x08\xb8\xe1\x49\xaa\xb1\x25\x28\x1c\x9a\x88\x08\x65\xa0\xa2\xb2\x4e\x8b\x48\x8b\x0f\xed\x55\xb6\x60\xba\x8a\x74\x09\xad\xff\x7c\xb1\xe7\xba\x1a\x1d\x4e\xd0\xd5\x6f\x3d\x25\x94\xf0\x59\x24\x44\xba\x93\x0d\x89\xa6\x76\x44\x3a\x03\x6b\x1a\x28\xd1\x54\x6c\x75\xe6\x33\xe0\xbd\x80\xfc\x99\x94\x75\xbb\x7e\x2a\xd9\xe9\x18\x40\x15\x01\xa5\x44\x90\x0c\xca\x2a\x82\x04\xa9\x6c\x5e\xfe\xaf\xf9\xb1\x3d\x4e\x25\xbf\xd6\x2c\x62\x89\x3d\xd2\x67\x6c\x48\xa2\x42\xac\x5f\x85\x76\xd2\x08\x2d\x85\x3a\x6b\x64\x64\xf4\xb7\x94\x7e\x7a\x0f\x5d\xf1\x9e\xa1\xf5\xe8\x1a\xaf\x12\x81\x2d\xcd\xe8\x54\xd0\xab\x5d\xbf\xb4\xb1\x9a\x7d\x67\x2b\x84\x8d\x7d\x89\xab\xfb\x1e\x43\xfc\x7c\x0a\x41\x30\xe2\xca\xb9\x2b\xe0\x9e\x52\x9b\x54\x75\x74\x54\x82\x9a\x96\x3d\x0e\x25\x8d\x3d\xf6\x6e\x75\xf6\xb7\x27\xc3\x36\x97\xa0\x9c\x23\x80\x41\x41\x45\xd7\x08\x80\xcc\xfe\xec\x9f\x74\x03\xeb\x3f\xa1\xb2\x2b\x0b\x81\x7a\xc7\xa1\x74\x11\x13\x70\xe4\xf4\xd1\x13\x27\xac\x1f\xed\xc7\x58\x67\x12\xc1\xd3\x09\x30\x8d\xa8\x59\x5d\xc6\x94\x5c\xef\x88\xfb\x85\x31\x86\xc0\xeb\xd6\x66\x7b\xf7\x75\xfb\xc2\x3e\xac\xef\x9a\xd3\xeb\x0c\x81\xde\x83\x35\x57\xc4\x50\xae\x01\xa8\x16\x31\x51\xa1\x5a\x03\x1a\xfa\x48\x47\x32\x6f\xfd\xee\x3e\xc9\xfd\x13\xdd\xad\x46\x50\x07\x21\x47\x03\xfe\xfc\x17\x4a\xb2\x6f\xa4\x1d\x05\x6c\x99\x4d\x7a\xec\xad\x13\x93\xdd\x49\x39\xd0\x1b\xf7\xdd\x47\x71\x59\x36\xcc\x65\xed\xff\x78\xed\xbf\x01\x00\x00\xff\xff\xf6\x6d\xd8\x2d\x8a\x4d\x00\x00")

func serviceDocHtmlGatewayHtmlBytes() ([]byte, error) {
	return bindataRead(
		_serviceDocHtmlGatewayHtml,
		"service/doc/html/gateway.html",
	)
}

func serviceDocHtmlGatewayHtml() (*asset, error) {
	bytes, err := serviceDocHtmlGatewayHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/doc/html/gateway.html", size: 19850, mode: os.FileMode(420), modTime: time.Unix(1693555677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceDocHtmlIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3f\x4f\xc4\x30\x0c\xc5\xf7\xfb\x14\x26\xea\x08\xe7\x15\x21\x37\x0b\x07\x2b\x0c\x65\x60\x34\x8d\xaf\xad\x2e\xfd\xa3\x34\x27\x38\x9d\xfc\xdd\x51\x9a\x56\x62\x42\x88\x29\x4f\xfe\x3d\xfb\x39\x09\xdd\x1c\x5e\x1e\xab\xf7\xd7\x27\x68\x63\xef\xed\x8e\xd2\x01\x9e\x87\xa6\x34\x32\x98\x54\x10\x76\x76\x07\x00\x40\xbd\x44\x86\xba\xe5\x30\x4b\x2c\xcd\x5b\xf5\x7c\x77\x6f\x56\x14\xbb\xe8\xc5\x1e\xc6\x9a\x30\xcb\x1d\x61\xee\xa4\x8f\xd1\x5d\x16\xd7\xf5\x0a\x45\x0f\x0f\x25\xec\xfb\xd1\x9d\xbd\x80\xea\x56\x9e\x82\x1c\xbb\xaf\x85\xad\x32\xb3\x04\x03\x0f\x8d\x40\x71\xba\x2d\xba\x28\xb9\xbf\xe1\x28\x9f\x7c\xd9\x4c\x34\x59\x62\x68\x83\x1c\x4b\xf3\x63\x9a\x2a\xba\xb1\x9e\x71\x75\x63\x42\x27\x50\x35\x36\xa9\x34\x6c\x5f\xa5\x5d\x41\x95\x90\x2d\xe1\x64\xb7\x4c\x19\xdc\xef\x1b\x9c\x83\x9f\xff\x18\x9f\xaf\xad\xfa\x8f\x7c\xc2\xfc\x78\x84\xcb\xef\x7c\x07\x00\x00\xff\xff\x18\xf4\x54\xb8\xad\x01\x00\x00")

func serviceDocHtmlIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceDocHtmlIndexTmpl,
		"service/doc/html/index.tmpl",
	)
}

func serviceDocHtmlIndexTmpl() (*asset, error) {
	bytes, err := serviceDocHtmlIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/doc/html/index.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(1685456553, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/doc/html/gateway.html": serviceDocHtmlGatewayHtml,
	"service/doc/html/index.tmpl":   serviceDocHtmlIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"doc": &bintree{nil, map[string]*bintree{
			"html": &bintree{nil, map[string]*bintree{
				"gateway.html": &bintree{serviceDocHtmlGatewayHtml, map[string]*bintree{}},
				"index.tmpl":   &bintree{serviceDocHtmlIndexTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
